options:
  parameters:
    author: guill
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: DoADistEst
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: DoA&DistEst
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: RF_Gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Ganancia RF (dB)
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '76'
    value: '50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [468, 10]
    rotation: 0
    state: disabled
- name: RF_Gain
  id: variable
  parameters:
    comment: ''
    value: '50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [471, 134]
    rotation: 0
    state: true
- name: c
  id: variable
  parameters:
    comment: ''
    value: int(3e8)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [380, 11]
    rotation: 0
    state: true
- name: f_mod
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: f_mod
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: 70e6
    step: 1e6
    stop: 6e9
    value: '2000000000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [263, 10]
    rotation: 0
    state: disabled
- name: f_mod
  id: variable
  parameters:
    comment: ''
    value: 2e9
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 135]
    rotation: 0
    state: true
- name: lanbda
  id: variable
  parameters:
    comment: ''
    value: c/f_mod
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [381, 72]
    rotation: 0
    state: true
- name: nsamples
  id: variable
  parameters:
    comment: ''
    value: '15000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [173, 69]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 9]
    rotation: 0
    state: enabled
- name: tx_pot_dB
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Tx Potencia (dB)
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '-50'
    step: '1'
    stop: '50'
    value: '-3'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [615, 11]
    rotation: 0
    state: disabled
- name: tx_pot_dB
  id: variable
  parameters:
    comment: ''
    value: '38'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 138]
    rotation: 0
    state: true
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: (lanbda/(4*numpy.pi))**2
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [489, 668]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: tx_pot_dB
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [404, 736]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_1
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: 500e3
    interp: '1'
    low_cutoff_freq: 300e3
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 100e3
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [346, 377]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_1_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: 500e3
    interp: '1'
    low_cutoff_freq: 300e3
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 100e3
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [349, 203]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_1_1
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: 500e3
    interp: '1'
    low_cutoff_freq: 300e3
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 25e3
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [305, 556]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [835, 738]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 291]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 473]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_1
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [499, 582]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [682, 371]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: nsamples
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/nsamples
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [810, 340]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_0_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: nsamples
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1/nsamples
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 516]
    rotation: 0
    state: enabled
- name: blocks_nlog10_ff_0_0_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '10'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [874, 603]
    rotation: 0
    state: enabled
- name: blocks_nlog10_ff_0_0_0_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '10'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [692, 694]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1203, 393]
    rotation: 0
    state: enabled
- name: blocks_null_source_0
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [874, 505]
    rotation: 0
    state: true
- name: blocks_sub_xx_0
  id: blocks_sub_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [662, 741]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='dBmeters to meters',   # will show up in GRC\n          \
      \  in_sig=[np.float32],\n            out_sig=[np.float32]\n        )\n     \
      \   # if an attribute with the same name as a parameter is found,\n        #\
      \ a callback is registered (properties work, too).\n\n    def work(self, input_items,\
      \ output_items):\n        \n        input_items[0] = 10**(input_items[0]/20)\n\
      \        output_items[0][:] = input_items[0]\n        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('dBmeters to meters', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [971, 687]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#Librerias para GPIO\nimport RPi.GPIO as GPIO   \
      \       \n\nfrom time import sleep\nimport time\n\nimport random\nimport paho.mqtt.client\
      \ as mqtt_client\nfrom statistics import mode\nimport os\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n\n    def\
      \ __init__(self, nsamples = 20e3, comparation_level = 1, tolerance = 1.3): \
      \ # only default arguments here\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='DoA + Dist Est',   # will show up in GRC\n    \
      \        in_sig=[np.float32, np.float32, np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        \n        # ----- Block self variables ------------------\n\
      \        self.counter = 0\n        self.nsamples = nsamples\n        self.min\
      \ = comparation_level - comparation_level*tolerance\n        self.max = comparation_level\
      \ + comparation_level*tolerance\n        self.dist_est_flag = False\n      \
      \  self.dist_estimation = []\n        self.do_stuff = True\n        self.safe_to_go\
      \ = True\n        self.ignored_samps = 0\n        self.decision = []\n     \
      \   self.straight_counter = 0\n        # ----------------------------------------\n\
      \        \n        \n        # ----- Motores GPIO ---------------------\n  \
      \      #Motor 1\n        self.in1 = 22\n        self.in2 = 23\n        self.en_a\
      \ = 27\n        #Motor 2\n        self.in3 = 24\n        self.in4 = 25\n   \
      \     self.en_b = 26\n        \n        GPIO.setwarnings(False)\n        #Modo\
      \ de trabajo GPIO\n        GPIO.setmode(GPIO.BCM)\n        #Defino los pines\
      \ como salida\n        #Motor 1\n        GPIO.setup(self.in1,GPIO.OUT)\n   \
      \     GPIO.setup(self.in2,GPIO.OUT)\n        GPIO.setup(self.en_a,GPIO.OUT)\n\
      \        #Motor 2\n        GPIO.setup(self.in3,GPIO.OUT)\n        GPIO.setup(self.in4,GPIO.OUT)\n\
      \        GPIO.setup(self.en_b,GPIO.OUT)\n\n        #Inicializo pines a nivel\
      \ bajo para q este parado\n        GPIO.output(self.in1,GPIO.LOW)\n        GPIO.output(self.in2,GPIO.LOW)\n\
      \        GPIO.output(self.in3,GPIO.LOW)\n        GPIO.output(self.in4,GPIO.LOW)\n\
      \        \n        # Genero PWM en el pin enable A (motor 1)\n        self.pwm_motor1=GPIO.PWM(self.en_a,800)\n\
      \        self.pwm_motor1.start(10)\n\n        # Genero PWM en el pin enable\
      \ B (motor 2)\n        self.pwm_motor2=GPIO.PWM(self.en_b,800)\n        self.pwm_motor2.start(10)\n\
      \        # ----------------------------------------\n        \n        \n  \
      \      # ----- MQTT -----------------------------\n        #Direccion del broker\n\
      \        self.broker_address = '192.168.0.230'\n        #Puerto del broker\n\
      \        self.broker_port = 1883\n        #Topicos de PUBLICACION\n        self.topic_pub_DoA\
      \ = \"gnuradio2BS_DoA\"\n        self.topic_pub_DistEst = \"gnuradio2BS_DistEst\"\
      \n        #Topicos de SUBSCRIPCION\n        self.topic_sub = \"BS2gnuradio\"\
      \n        #We define the username and passwd according to the configuration\
      \ of the MQTT broker\n        self.username = \"utic\"\n        self.passwd\
      \ = \"123456\"\n        # Generamos un ID de cliente\n        self.client_id\
      \ = f'python-mqtt-{random.randint(0, 100)}'\n        #Nos conectamos\n     \
      \   self.client = self.connect_mqtt()\n        self.client.loop_start()\n  \
      \      #self.subscribe(self.client)\n        print('despues de subscribe()')\n\
      \        # ----------------------------------------\n        \n    #Funcion\
      \ de conexion al broker\n    def connect_mqtt(self) -> mqtt_client:\n      \
      \  def on_connect(client, userdata, flags, rc):\n            if rc == 0:\n \
      \               print(\"Connected to MQTT Broker!\\n\")\n            else:\n\
      \                print(\"Failed to connect, return code %d\\n\", rc)\n\n   \
      \     client = mqtt_client.Client(self.client_id)\n        client.username_pw_set(self.username,\
      \ self.passwd)\n        client.on_connect = on_connect\n        client.connect(self.broker_address,\
      \ self.broker_port)\n        return client\n\n    \n    #Funcion de publicar\
      \ al broker\n    def publish(self, client, msg, topic):\n        result = client.publish(topic,msg)\n\
      \        status = result[0]\n        if status == 0:\n          print(\"Success\
      \ publishing ...\")\n          print(\"Topic: \" + topic)\n        else:\n \
      \         print(\"Failed to send message to topic \" + topic)\n        print(\"\
      \\n\")\n\n\n    def work(self, input_items, output_items):\n               \
      \ \n        if self.do_stuff and self.safe_to_go:\n            if (not self.dist_est_flag):\n\
      \                for i in range(len(input_items[0])):\n                    if\
      \ self.counter >= self.nsamples:\n                        self.counter = 0\n\
      \                        \n                        if (input_items[0][i] >=\
      \ self.min) and (input_items[0][i] <= self.max):\n                         \
      \   self.decision.append('S')\n                        \n                  \
      \      elif input_items[0][i] > self.max:\n                            self.decision.append('R')\n\
      \                            \n                        else:\n             \
      \               self.decision.append('L')\n                            \n  \
      \                      if len(self.decision) == 100:\n                     \
      \       final_decision = mode(self.decision)\n                            print(\"\
      Decision de DoA: \", final_decision)\n                            \n       \
      \                     if final_decision == 'S':\n                          \
      \      GPIO.output(self.in1,GPIO.LOW)\n                                GPIO.output(self.in2,GPIO.LOW)\n\
      \                                GPIO.output(self.in3,GPIO.LOW)\n          \
      \                      GPIO.output(self.in4,GPIO.LOW)\n                    \
      \            \n                                self.straight_counter+=1\n  \
      \                              \n                                self.publish(self.client,\
      \ 'Looking straight to BS ', self.topic_pub_DoA)\n                         \
      \       \n                                if self.straight_counter == 5:\n \
      \                                   self.dist_est_flag = True\n            \
      \                        \n                                    self.publish(self.client,\
      \ 'DoA finished ... changing to Distance Estimation mode ...', self.topic_pub_DoA)\n\
      \                                    \n                            elif final_decision\
      \ == 'L':\n                                GPIO.output(self.in1,GPIO.LOW)\n\
      \                                GPIO.output(self.in2,GPIO.HIGH)\n         \
      \                       GPIO.output(self.in3,GPIO.HIGH)\n                  \
      \              GPIO.output(self.in4,GPIO.LOW)\n                            \
      \    \n                                self.straight_counter = 0\n         \
      \                       \n                                self.publish(self.client,\
      \ 'Rotating to the left', self.topic_pub_DoA)\n                            \
      \    \n                            else:\n                                GPIO.output(self.in1,GPIO.HIGH)\n\
      \                                GPIO.output(self.in2,GPIO.LOW)\n          \
      \                      GPIO.output(self.in3,GPIO.LOW)\n                    \
      \            GPIO.output(self.in4,GPIO.HIGH)\n                             \
      \   \n                                self.straight_counter = 0\n          \
      \                      \n                                self.publish(self.client,\
      \ 'Rotating to the right', self.topic_pub_DoA)\n                           \
      \     \n                            self.decision = []\n                   \
      \ self.counter+=1\n\n            else:\n                for i in range(len(input_items[2])):\n\
      \                    if self.counter >= self.nsamples:\n                   \
      \     self.counter = 0\n                        self.dist_estimation.append(input_items[2][i])\n\
      \                        \n                        if len(self.dist_estimation)\
      \ == 100:\n                            dist_estim_mean = np.mean(self.dist_estimation)\n\
      \                            print(dist_estim_mean)\n                      \
      \      self.publish(self.client, str(dist_estim_mean), self.topic_pub_DistEst)\n\
      \                            self.do_stuff = False\n                       \
      \     self.dist_est_flag = False\n                            os.system('pkill\
      \ -f DoADistEst.py')\n                        \n                    self.counter+=1\n\
      \                \n        output_items[0][:] = input_items[0]\n        return\
      \ len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    comparation_level: '1.3'
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamples: nsamples
    tolerance: '0.9'
  states:
    _io_cache: ('DoA + Dist Est', 'blk', [('nsamples', '20000.0'), ('comparation_level',
      '1'), ('tolerance', '1.3')], [('0', 'float', 1), ('1', 'float', 1), ('2', 'float',
      1)], [('0', 'float', 1)], '', ['nsamples'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1131, 430]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [9, 119]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Right
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 240.0]
    rotation: 0
    state: true
- name: note_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: DoA ->
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 376.0]
    rotation: 0
    state: true
- name: note_0_0_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Dist Est ->
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [182, 763]
    rotation: 0
    state: true
- name: note_1
  id: note
  parameters:
    alias: ''
    comment: ''
    note: Left
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 512.0]
    rotation: 0
    state: true
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'False'
    avg: '0'
    color1: ("black", "black")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"DoA_pot_div"'
    nconnections: '1'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1010, 255]
    rotation: 0
    state: disabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: samp_rate
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: f_mod
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '"serial=31BBEFE"'
    dev_args: ''
    gain0: RF_Gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 403]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: samp_rate
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: f_mod
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '"serial=31BA185"'
    dev_args: ''
    gain0: RF_Gain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 212.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: RX_signal_dB
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [967, 559]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: RX_signal_dB
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [389, 794]
    rotation: 0
    state: enabled

connections:
- [analog_const_source_x_0, '0', blocks_nlog10_ff_0_0_0_0, '0']
- [analog_const_source_x_0_0, '0', blocks_sub_xx_0, '0']
- [band_pass_filter_0_1, '0', blocks_complex_to_mag_squared_0_0, '0']
- [band_pass_filter_0_1_0, '0', blocks_complex_to_mag_squared_0, '0']
- [band_pass_filter_0_1_1, '0', blocks_complex_to_mag_squared_0_1, '0']
- [blocks_add_xx_0_0, '0', epy_block_0_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_divide_xx_0, '0']
- [blocks_complex_to_mag_squared_0_0, '0', blocks_divide_xx_0, '1']
- [blocks_complex_to_mag_squared_0_1, '0', blocks_moving_average_xx_0_0, '0']
- [blocks_divide_xx_0, '0', blocks_moving_average_xx_0, '0']
- [blocks_moving_average_xx_0, '0', epy_block_1, '0']
- [blocks_moving_average_xx_0, '0', qtgui_number_sink_0, '0']
- [blocks_moving_average_xx_0_0, '0', blocks_nlog10_ff_0_0_0, '0']
- [blocks_nlog10_ff_0_0_0, '0', virtual_sink_0, '0']
- [blocks_nlog10_ff_0_0_0_0, '0', blocks_add_xx_0_0, '0']
- [blocks_null_source_0, '0', epy_block_1, '1']
- [blocks_sub_xx_0, '0', blocks_add_xx_0_0, '1']
- [epy_block_0_0, '0', epy_block_1, '2']
- [epy_block_1, '0', blocks_null_sink_0_0, '0']
- [uhd_usrp_source_0, '0', band_pass_filter_0_1, '0']
- [uhd_usrp_source_0_0, '0', band_pass_filter_0_1_0, '0']
- [uhd_usrp_source_0_0, '0', band_pass_filter_0_1_1, '0']
- [virtual_source_0, '0', blocks_sub_xx_0, '1']

metadata:
  file_format: 1
